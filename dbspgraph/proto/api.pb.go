// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The type of this step.
type Step_Type int32

const (
	Step_INVALID Step_Type = 0
	// This step corresponds to the PRE step of the executor callback.
	Step_PRE Step_Type = 1
	// This step corresponds to the POST step of the executor callback.
	Step_POST Step_Type = 2
	// This step corresponds to the POST_KEEP_RUNNING step of the executor
	// callback.
	Step_POST_KEEP_RUNNING Step_Type = 3
	// This step indicates to the master that the worker has successfully
	// completed the graph execution and is ready to perist the computation
	// results.
	Step_EXECUTED_GRAPH Step_Type = 4
	// This step indicates to the master that the worker has successfully
	// persisted the computation results.
	Step_PESISTED_RESULTS Step_Type = 5
	// This step indicates to the master that the worker has completed the job.
	Step_COMPLETED_JOB Step_Type = 6
)

var Step_Type_name = map[int32]string{
	0: "INVALID",
	1: "PRE",
	2: "POST",
	3: "POST_KEEP_RUNNING",
	4: "EXECUTED_GRAPH",
	5: "PESISTED_RESULTS",
	6: "COMPLETED_JOB",
}

var Step_Type_value = map[string]int32{
	"INVALID":           0,
	"PRE":               1,
	"POST":              2,
	"POST_KEEP_RUNNING": 3,
	"EXECUTED_GRAPH":    4,
	"PESISTED_RESULTS":  5,
	"COMPLETED_JOB":     6,
}

func (x Step_Type) String() string {
	return proto.EnumName(Step_Type_name, int32(x))
}

func (Step_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3, 0}
}

// WorkerPayload encapsulates the possible message types that a worker can
// send to a master node.
type WorkerPayload struct {
	// Types that are valid to be assigned to Payload:
	//	*WorkerPayload_Step
	//	*WorkerPayload_RelayMessage
	Payload              isWorkerPayload_Payload `protobuf_oneof:"payload"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *WorkerPayload) Reset()         { *m = WorkerPayload{} }
func (m *WorkerPayload) String() string { return proto.CompactTextString(m) }
func (*WorkerPayload) ProtoMessage()    {}
func (*WorkerPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

func (m *WorkerPayload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WorkerPayload.Unmarshal(m, b)
}
func (m *WorkerPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WorkerPayload.Marshal(b, m, deterministic)
}
func (m *WorkerPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkerPayload.Merge(m, src)
}
func (m *WorkerPayload) XXX_Size() int {
	return xxx_messageInfo_WorkerPayload.Size(m)
}
func (m *WorkerPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkerPayload.DiscardUnknown(m)
}

var xxx_messageInfo_WorkerPayload proto.InternalMessageInfo

type isWorkerPayload_Payload interface {
	isWorkerPayload_Payload()
}

type WorkerPayload_Step struct {
	Step *Step `protobuf:"bytes,1,opt,name=step,proto3,oneof"`
}

type WorkerPayload_RelayMessage struct {
	RelayMessage *RelayMessage `protobuf:"bytes,2,opt,name=relay_message,json=relayMessage,proto3,oneof"`
}

func (*WorkerPayload_Step) isWorkerPayload_Payload() {}

func (*WorkerPayload_RelayMessage) isWorkerPayload_Payload() {}

func (m *WorkerPayload) GetPayload() isWorkerPayload_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *WorkerPayload) GetStep() *Step {
	if x, ok := m.GetPayload().(*WorkerPayload_Step); ok {
		return x.Step
	}
	return nil
}

func (m *WorkerPayload) GetRelayMessage() *RelayMessage {
	if x, ok := m.GetPayload().(*WorkerPayload_RelayMessage); ok {
		return x.RelayMessage
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*WorkerPayload) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*WorkerPayload_Step)(nil),
		(*WorkerPayload_RelayMessage)(nil),
	}
}

// MasterPayload encapsulates the possible message types that a master can
// send to a worker node.
type MasterPayload struct {
	// Types that are valid to be assigned to Payload:
	//	*MasterPayload_JobDetails
	//	*MasterPayload_Step
	//	*MasterPayload_RelayMessage
	Payload              isMasterPayload_Payload `protobuf_oneof:"payload"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *MasterPayload) Reset()         { *m = MasterPayload{} }
func (m *MasterPayload) String() string { return proto.CompactTextString(m) }
func (*MasterPayload) ProtoMessage()    {}
func (*MasterPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

func (m *MasterPayload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MasterPayload.Unmarshal(m, b)
}
func (m *MasterPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MasterPayload.Marshal(b, m, deterministic)
}
func (m *MasterPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MasterPayload.Merge(m, src)
}
func (m *MasterPayload) XXX_Size() int {
	return xxx_messageInfo_MasterPayload.Size(m)
}
func (m *MasterPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_MasterPayload.DiscardUnknown(m)
}

var xxx_messageInfo_MasterPayload proto.InternalMessageInfo

type isMasterPayload_Payload interface {
	isMasterPayload_Payload()
}

type MasterPayload_JobDetails struct {
	JobDetails *JobDetails `protobuf:"bytes,1,opt,name=job_details,json=jobDetails,proto3,oneof"`
}

type MasterPayload_Step struct {
	Step *Step `protobuf:"bytes,2,opt,name=step,proto3,oneof"`
}

type MasterPayload_RelayMessage struct {
	RelayMessage *RelayMessage `protobuf:"bytes,3,opt,name=relay_message,json=relayMessage,proto3,oneof"`
}

func (*MasterPayload_JobDetails) isMasterPayload_Payload() {}

func (*MasterPayload_Step) isMasterPayload_Payload() {}

func (*MasterPayload_RelayMessage) isMasterPayload_Payload() {}

func (m *MasterPayload) GetPayload() isMasterPayload_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *MasterPayload) GetJobDetails() *JobDetails {
	if x, ok := m.GetPayload().(*MasterPayload_JobDetails); ok {
		return x.JobDetails
	}
	return nil
}

func (m *MasterPayload) GetStep() *Step {
	if x, ok := m.GetPayload().(*MasterPayload_Step); ok {
		return x.Step
	}
	return nil
}

func (m *MasterPayload) GetRelayMessage() *RelayMessage {
	if x, ok := m.GetPayload().(*MasterPayload_RelayMessage); ok {
		return x.RelayMessage
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MasterPayload) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MasterPayload_JobDetails)(nil),
		(*MasterPayload_Step)(nil),
		(*MasterPayload_RelayMessage)(nil),
	}
}

// JobDetails describes a job assigned by a master node to a worker.
type JobDetails struct {
	// A unique ID for the job.
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// The creation time for the job.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// The [from, to) UUID range assigned to the worker. Note that from is
	// inclusive and to is exclusive.
	PartitionFromUuid    []byte   `protobuf:"bytes,3,opt,name=partition_from_uuid,json=partitionFromUuid,proto3" json:"partition_from_uuid,omitempty"`
	PartitionToUuid      []byte   `protobuf:"bytes,4,opt,name=partition_to_uuid,json=partitionToUuid,proto3" json:"partition_to_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobDetails) Reset()         { *m = JobDetails{} }
func (m *JobDetails) String() string { return proto.CompactTextString(m) }
func (*JobDetails) ProtoMessage()    {}
func (*JobDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}

func (m *JobDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobDetails.Unmarshal(m, b)
}
func (m *JobDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobDetails.Marshal(b, m, deterministic)
}
func (m *JobDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobDetails.Merge(m, src)
}
func (m *JobDetails) XXX_Size() int {
	return xxx_messageInfo_JobDetails.Size(m)
}
func (m *JobDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_JobDetails.DiscardUnknown(m)
}

var xxx_messageInfo_JobDetails proto.InternalMessageInfo

func (m *JobDetails) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *JobDetails) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *JobDetails) GetPartitionFromUuid() []byte {
	if m != nil {
		return m.PartitionFromUuid
	}
	return nil
}

func (m *JobDetails) GetPartitionToUuid() []byte {
	if m != nil {
		return m.PartitionToUuid
	}
	return nil
}

// Step describes the current state of a worker or a master. Workers send a
// Step message with their current state to enter a synchronization barrier
// and wait for the other workers. Once all workers reach the barrier, the
// master node (depending on the step type) processes the individual worker
// steps to update its global state and broadcasts a new Step message (with
// a matching step type) to notify the workers that they can exit the barrier.
type Step struct {
	// The type of this step.
	Type Step_Type `protobuf:"varint,1,opt,name=type,proto3,enum=proto.Step_Type" json:"type,omitempty"`
	// Workers use this field to submit their local aggregator delta values wen
	// reaching the POST step. The master collects the deltas, aggregates them to
	// its own aggregator values and broadcasts the global aggregator values in
	// the response. Workers must then *overwrite* their local aggregator values
	// with the values provided by the master.
	AggregatorValues map[string]*any.Any `protobuf:"bytes,2,rep,name=aggregator_values,json=aggregatorValues,proto3" json:"aggregator_values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Workers use this field to submit their local active-in-step count when
	// reaching the POST_KEEP_RUNNING step. The step response broadcasted by
	// the master uses the same field to specify the global active-in-step count
	// that the workers should pass to the graph executor callbacks.
	ActiveInStep         int64    `protobuf:"varint,3,opt,name=activeInStep,proto3" json:"activeInStep,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Step) Reset()         { *m = Step{} }
func (m *Step) String() string { return proto.CompactTextString(m) }
func (*Step) ProtoMessage()    {}
func (*Step) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}

func (m *Step) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Step.Unmarshal(m, b)
}
func (m *Step) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Step.Marshal(b, m, deterministic)
}
func (m *Step) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Step.Merge(m, src)
}
func (m *Step) XXX_Size() int {
	return xxx_messageInfo_Step.Size(m)
}
func (m *Step) XXX_DiscardUnknown() {
	xxx_messageInfo_Step.DiscardUnknown(m)
}

var xxx_messageInfo_Step proto.InternalMessageInfo

func (m *Step) GetType() Step_Type {
	if m != nil {
		return m.Type
	}
	return Step_INVALID
}

func (m *Step) GetAggregatorValues() map[string]*any.Any {
	if m != nil {
		return m.AggregatorValues
	}
	return nil
}

func (m *Step) GetActiveInStep() int64 {
	if m != nil {
		return m.ActiveInStep
	}
	return 0
}

// RelayMessage describes a graph message that should be relayed to a remote
// graph instance which is managed by another worker.
type RelayMessage struct {
	// The message destination UUID.
	Destination string `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	// The serialized message contents.
	Message              *any.Any `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RelayMessage) Reset()         { *m = RelayMessage{} }
func (m *RelayMessage) String() string { return proto.CompactTextString(m) }
func (*RelayMessage) ProtoMessage()    {}
func (*RelayMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}

func (m *RelayMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RelayMessage.Unmarshal(m, b)
}
func (m *RelayMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RelayMessage.Marshal(b, m, deterministic)
}
func (m *RelayMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelayMessage.Merge(m, src)
}
func (m *RelayMessage) XXX_Size() int {
	return xxx_messageInfo_RelayMessage.Size(m)
}
func (m *RelayMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_RelayMessage.DiscardUnknown(m)
}

var xxx_messageInfo_RelayMessage proto.InternalMessageInfo

func (m *RelayMessage) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *RelayMessage) GetMessage() *any.Any {
	if m != nil {
		return m.Message
	}
	return nil
}

func init() {
	proto.RegisterEnum("proto.Step_Type", Step_Type_name, Step_Type_value)
	proto.RegisterType((*WorkerPayload)(nil), "proto.WorkerPayload")
	proto.RegisterType((*MasterPayload)(nil), "proto.MasterPayload")
	proto.RegisterType((*JobDetails)(nil), "proto.JobDetails")
	proto.RegisterType((*Step)(nil), "proto.Step")
	proto.RegisterMapType((map[string]*any.Any)(nil), "proto.Step.AggregatorValuesEntry")
	proto.RegisterType((*RelayMessage)(nil), "proto.RelayMessage")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 608 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xcf, 0x52, 0xdb, 0x3c,
	0x14, 0xc5, 0xe3, 0xc4, 0x21, 0xe4, 0x26, 0xe1, 0x73, 0x04, 0xcc, 0xf0, 0x65, 0x53, 0xc8, 0x74,
	0xc1, 0xb0, 0x30, 0x9d, 0xb4, 0x8b, 0x96, 0xae, 0x02, 0xb8, 0x24, 0x29, 0x04, 0x57, 0x4e, 0x68,
	0xbb, 0x72, 0x65, 0x2c, 0x3c, 0x86, 0xd8, 0xf2, 0xc8, 0x32, 0x33, 0xee, 0x4b, 0x75, 0xdf, 0x17,
	0xeb, 0xb6, 0x63, 0xd9, 0xf9, 0x47, 0xd9, 0xb4, 0xab, 0x58, 0xe7, 0xfc, 0x24, 0x9d, 0x7b, 0x6f,
	0x04, 0x75, 0x12, 0xf9, 0x7a, 0xc4, 0x99, 0x60, 0xa8, 0x2a, 0x7f, 0x3a, 0x2f, 0x3c, 0xc6, 0xbc,
	0x19, 0x3d, 0x96, 0x2b, 0x27, 0xb9, 0x3b, 0x16, 0x7e, 0x40, 0x63, 0x41, 0x82, 0x28, 0xe7, 0x3a,
	0xff, 0x3f, 0x05, 0x48, 0x98, 0xe6, 0x56, 0x37, 0x85, 0xd6, 0x67, 0xc6, 0x1f, 0x28, 0x37, 0x49,
	0x3a, 0x63, 0xc4, 0x45, 0x07, 0xa0, 0xc6, 0x82, 0x46, 0x7b, 0xca, 0xbe, 0x72, 0xd8, 0xe8, 0x35,
	0x72, 0x4c, 0xb7, 0x04, 0x8d, 0x06, 0x25, 0x2c, 0x2d, 0x74, 0x02, 0x2d, 0x4e, 0x67, 0x24, 0xb5,
	0x03, 0x1a, 0xc7, 0xc4, 0xa3, 0x7b, 0x65, 0xc9, 0x6e, 0x17, 0x2c, 0xce, 0xbc, 0xab, 0xdc, 0x1a,
	0x94, 0x70, 0x93, 0xaf, 0xac, 0x4f, 0xeb, 0x50, 0x8b, 0xf2, 0x9b, 0xba, 0x3f, 0x14, 0x68, 0x5d,
	0x91, 0x58, 0x2c, 0xef, 0x7e, 0x03, 0x8d, 0x7b, 0xe6, 0xd8, 0x2e, 0x15, 0xc4, 0x9f, 0xc5, 0x45,
	0x84, 0x76, 0x71, 0xec, 0x88, 0x39, 0xe7, 0xb9, 0x31, 0x28, 0x61, 0xb8, 0x5f, 0xac, 0x16, 0x89,
	0xcb, 0x7f, 0x91, 0xb8, 0xf2, 0x4f, 0x89, 0x7f, 0x2a, 0x00, 0xcb, 0x18, 0x68, 0x17, 0x36, 0xb2,
	0xb8, 0xbe, 0x2b, 0x93, 0xd6, 0x71, 0xf5, 0x9e, 0x39, 0x43, 0x17, 0xbd, 0x03, 0xb8, 0xe5, 0x94,
	0x08, 0xea, 0xda, 0x44, 0x14, 0xa9, 0x3a, 0x7a, 0x3e, 0x02, 0x7d, 0x3e, 0x02, 0x7d, 0x32, 0x9f,
	0x11, 0xae, 0x17, 0x74, 0x5f, 0x20, 0x1d, 0xb6, 0x23, 0xc2, 0x85, 0x2f, 0x7c, 0x16, 0xda, 0x77,
	0x9c, 0x05, 0x76, 0x92, 0xf8, 0xae, 0x4c, 0xdb, 0xc4, 0xed, 0x85, 0xf5, 0x81, 0xb3, 0x60, 0x9a,
	0xf8, 0x2e, 0x3a, 0x82, 0xa5, 0x68, 0x0b, 0x96, 0xd3, 0xaa, 0xa4, 0xff, 0x5b, 0x18, 0x13, 0x96,
	0xb1, 0xdd, 0x5f, 0x65, 0x50, 0xb3, 0xa6, 0xa0, 0x97, 0xa0, 0x8a, 0x34, 0xa2, 0x32, 0xf4, 0x56,
	0x4f, 0x5b, 0xe9, 0x97, 0x3e, 0x49, 0x23, 0x8a, 0xa5, 0x8b, 0xc6, 0xd0, 0x26, 0x9e, 0xc7, 0xa9,
	0x47, 0x04, 0xe3, 0xf6, 0x23, 0x99, 0x25, 0x34, 0xde, 0x2b, 0xef, 0x57, 0x0e, 0x1b, 0xbd, 0x83,
	0xd5, 0x2d, 0xfd, 0x05, 0x74, 0x23, 0x19, 0x23, 0x14, 0x3c, 0xc5, 0x1a, 0x79, 0x22, 0xa3, 0x2e,
	0x34, 0xc9, 0xad, 0xf0, 0x1f, 0xe9, 0x30, 0xcc, 0xf6, 0xc9, 0x9a, 0x2a, 0x78, 0x4d, 0xeb, 0x7c,
	0x85, 0xdd, 0x67, 0x8f, 0x43, 0x1a, 0x54, 0x1e, 0x68, 0x5a, 0xb4, 0x39, 0xfb, 0x44, 0x47, 0x50,
	0x95, 0x99, 0x8a, 0xfe, 0xee, 0xfc, 0xd1, 0xdf, 0x7e, 0x98, 0xe2, 0x1c, 0x39, 0x29, 0xbf, 0x55,
	0xba, 0xdf, 0x41, 0xcd, 0x8a, 0x43, 0x0d, 0xa8, 0x0d, 0xc7, 0x37, 0xfd, 0xcb, 0xe1, 0xb9, 0x56,
	0x42, 0x35, 0xa8, 0x98, 0xd8, 0xd0, 0x14, 0xb4, 0x09, 0xaa, 0x79, 0x6d, 0x4d, 0xb4, 0x32, 0xda,
	0x85, 0x76, 0xf6, 0x65, 0x7f, 0x34, 0x0c, 0xd3, 0xc6, 0xd3, 0xf1, 0x78, 0x38, 0xbe, 0xd0, 0x2a,
	0x08, 0xc1, 0x96, 0xf1, 0xc5, 0x38, 0x9b, 0x4e, 0x8c, 0x73, 0xfb, 0x02, 0xf7, 0xcd, 0x81, 0xa6,
	0xa2, 0x1d, 0xd0, 0x4c, 0xc3, 0x1a, 0x5a, 0x99, 0x86, 0x0d, 0x6b, 0x7a, 0x39, 0xb1, 0xb4, 0x2a,
	0x6a, 0x43, 0xeb, 0xec, 0xfa, 0xca, 0xbc, 0x34, 0x32, 0x79, 0x74, 0x7d, 0xaa, 0x6d, 0x74, 0xbf,
	0x41, 0x73, 0xf5, 0x1f, 0x86, 0xf6, 0xa1, 0xe1, 0xd2, 0x58, 0xf8, 0x21, 0xc9, 0xc6, 0x53, 0x54,
	0xb5, 0x2a, 0x21, 0x1d, 0x6a, 0xeb, 0x6f, 0xeb, 0xf9, 0xfa, 0xe6, 0x50, 0xef, 0x02, 0x36, 0x47,
	0xcc, 0xf9, 0x94, 0xd0, 0x84, 0xa2, 0xf7, 0x50, 0x1f, 0x31, 0xc7, 0x12, 0x9c, 0x92, 0x00, 0xed,
	0x14, 0xa3, 0x5a, 0x7b, 0xe3, 0x9d, 0xb9, 0xba, 0xf6, 0xfa, 0x0e, 0x95, 0x57, 0x8a, 0xb3, 0x21,
	0x8d, 0xd7, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x85, 0x1e, 0xf2, 0x64, 0x65, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// JobQueueClient is the client API for JobQueue service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JobQueueClient interface {
	// JobStream establishes a bi-directional connection between a worker and a
	// master. The master eventually broadcasts a new job to the connected
	// workers and the job super-steps are executed in lock-step across all
	// workers.
	JobStream(ctx context.Context, opts ...grpc.CallOption) (JobQueue_JobStreamClient, error)
}

type jobQueueClient struct {
	cc *grpc.ClientConn
}

func NewJobQueueClient(cc *grpc.ClientConn) JobQueueClient {
	return &jobQueueClient{cc}
}

func (c *jobQueueClient) JobStream(ctx context.Context, opts ...grpc.CallOption) (JobQueue_JobStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_JobQueue_serviceDesc.Streams[0], "/proto.JobQueue/JobStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobQueueJobStreamClient{stream}
	return x, nil
}

type JobQueue_JobStreamClient interface {
	Send(*WorkerPayload) error
	Recv() (*MasterPayload, error)
	grpc.ClientStream
}

type jobQueueJobStreamClient struct {
	grpc.ClientStream
}

func (x *jobQueueJobStreamClient) Send(m *WorkerPayload) error {
	return x.ClientStream.SendMsg(m)
}

func (x *jobQueueJobStreamClient) Recv() (*MasterPayload, error) {
	m := new(MasterPayload)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JobQueueServer is the server API for JobQueue service.
type JobQueueServer interface {
	// JobStream establishes a bi-directional connection between a worker and a
	// master. The master eventually broadcasts a new job to the connected
	// workers and the job super-steps are executed in lock-step across all
	// workers.
	JobStream(JobQueue_JobStreamServer) error
}

// UnimplementedJobQueueServer can be embedded to have forward compatible implementations.
type UnimplementedJobQueueServer struct {
}

func (*UnimplementedJobQueueServer) JobStream(srv JobQueue_JobStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method JobStream not implemented")
}

func RegisterJobQueueServer(s *grpc.Server, srv JobQueueServer) {
	s.RegisterService(&_JobQueue_serviceDesc, srv)
}

func _JobQueue_JobStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JobQueueServer).JobStream(&jobQueueJobStreamServer{stream})
}

type JobQueue_JobStreamServer interface {
	Send(*MasterPayload) error
	Recv() (*WorkerPayload, error)
	grpc.ServerStream
}

type jobQueueJobStreamServer struct {
	grpc.ServerStream
}

func (x *jobQueueJobStreamServer) Send(m *MasterPayload) error {
	return x.ServerStream.SendMsg(m)
}

func (x *jobQueueJobStreamServer) Recv() (*WorkerPayload, error) {
	m := new(WorkerPayload)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _JobQueue_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.JobQueue",
	HandlerType: (*JobQueueServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "JobStream",
			Handler:       _JobQueue_JobStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}
